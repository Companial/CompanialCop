<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnalyzerPrefix" xml:space="preserve">
    <value>CM</value>
  </data>
  <data name="Rule0001KeyNamingDescription" xml:space="preserve">
    <value>Name for primary key must be PK.</value>
  </data>
  <data name="Rule0001KeyNamingFormat" xml:space="preserve">
    <value>The key '{0}' has an incorrect name. The valid name is PK.</value>
  </data>
  <data name="Rule0001KeyNamingTitle" xml:space="preserve">
    <value>Name for primary key must be PK.</value>
  </data>
  <data name="Rule0002LockedVariableLablesDescription" xml:space="preserve">
    <value>Variable with suffix Tok must be locked.</value>
  </data>
  <data name="Rule0002LockedVariableLablesFormat" xml:space="preserve">
    <value>Variable with suffix Tok must be locked.</value>
  </data>
  <data name="Rule0002LockedVariableLablesTitle" xml:space="preserve">
    <value>Variable with suffix Tok must be locked.</value>
  </data>
  <data name="Rule0002LockedVariableTokLablesDescription" xml:space="preserve">
    <value>Locked variables must have suffix Tok.</value>
  </data>
  <data name="Rule0002LockedVariableTokLablesFormat" xml:space="preserve">
    <value>Locked variable with name '{0}' must have a suffix Tok.</value>
  </data>
  <data name="Rule0002LockedVariableTokLablesTitle" xml:space="preserve">
    <value>Locked variables must have suffix Tok.</value>
  </data>
  <data name="Rule0003MethodsNameShouldNotContainWhiteSpaceDescription" xml:space="preserve">
    <value>Procedure name must not contain whitespaces.</value>
  </data>
  <data name="Rule0003MethodsNameShouldNotContainWhiteSpaceFormat" xml:space="preserve">
    <value>Procedure with name '{0}' must not contain whitespaces.</value>
  </data>
  <data name="Rule0003MethodsNameShouldNotContainWhiteSpaceTitle" xml:space="preserve">
    <value>Procedure name must not contain whitespaces.</value>
  </data>
  <data name="Rule0004First19TableFieldsIDReservedToPrimaryKeyDescription" xml:space="preserve">
    <value>First 19 field IDs are reserved for primary key fields.</value>
  </data>
  <data name="Rule0004First19TableFieldsIDReservedToPrimaryKeyFormat" xml:space="preserve">
    <value>The field identifier '{0}' is not valid. First 19 Field IDs are reserved for primary key fields.</value>
  </data>
  <data name="Rule0004First19TableFieldsIDReservedToPrimaryKeyTitle" xml:space="preserve">
    <value>First 19 field IDs are reserved for primary key fields.</value>
  </data>
  <data name="Rule0005EnumExtensionsValuesNumberedInDedicatedRangeDescription" xml:space="preserve">
    <value>The enum identifier must be within the allowed range.</value>
  </data>
  <data name="Rule0005EnumExtensionsValuesNumberedInDedicatedRangeFormat" xml:space="preserve">
    <value>Then enum identifier '{0}' is not valid. It must be within the range '{1}.</value>
  </data>
  <data name="Rule0005EnumExtensionsValuesNumberedInDedicatedRangeTitle" xml:space="preserve">
    <value>The enum identifier must be within the allowed range.</value>
  </data>
  <data name="Rule0006HardcodedIpAddressDescription" xml:space="preserve">
    <value>IP address must not be present in any part of the source code.</value>
  </data>
  <data name="Rule0006HardcodedIpAddressFormat" xml:space="preserve">
    <value>The Label {0} must not contain IP addresses.</value>
  </data>
  <data name="Rule0006HardcodedIpAddressTitle" xml:space="preserve">
    <value>IP address must not be present in any part of the source code.</value>
  </data>
  <data name="Rule0007FlowFieldsShouldNotBeEditableDescription" xml:space="preserve">
    <value>FlowFields must not be editable.</value>
  </data>
  <data name="Rule0007FlowFieldsShouldNotBeEditableFormat" xml:space="preserve">
    <value>Field with name '{0}' must have the Editable property equals false.</value>
  </data>
  <data name="Rule0007FlowFieldsShouldNotBeEditableTitle" xml:space="preserve">
    <value>FlowFields must not be editable.</value>
  </data>
  <data name="Rule0008CommitMustBeExplainedByCommentDescription" xml:space="preserve">
    <value>Commit() must have a comment to justify its existence. Either a leading or a trailing comment.</value>
  </data>
  <data name="Rule0008CommitMustBeExplainedByCommentFormat" xml:space="preserve">
    <value>Commit() must have a comment to justify its existence. Either a leading or a trailing comment.</value>
  </data>
  <data name="Rule0008CommitMustBeExplainedByCommentTitle" xml:space="preserve">
    <value>Commit() must have a comment to justify its existence. Either a leading or a trailing comment.</value>
  </data>
  <data name="Rule0009DoNotUseObjectIdInSystemFunctionsDescription" xml:space="preserve">
    <value>Using hardcoded IDs in functions is not allowed.</value>
  </data>
  <data name="Rule0009DoNotUseObjectIdInSystemFunctionsFormat" xml:space="preserve">
    <value>Using hardcoded IDs in functions is not allowed.</value>
  </data>
  <data name="Rule0009DoNotUseObjectIdInSystemFunctionsTitle" xml:space="preserve">
    <value>Using hardcoded IDs in functions is not allowed.</value>
  </data>
  <data name="Rule0010CheckForMissingCaptionsDescription" xml:space="preserve">
    <value>Caption is missing</value>
  </data>
  <data name="Rule0010CheckForMissingCaptionsFormat" xml:space="preserve">
    <value>'{0}' must have caption property.</value>
  </data>
  <data name="Rule0010CheckForMissingCaptionsTitle" xml:space="preserve">
    <value>Caption is missing</value>
  </data>
  <data name="Rule0011SemicolonAfterProcedureDeclarationDescription" xml:space="preserve">
    <value>Procedure must not end with semicolon.</value>
  </data>
  <data name="Rule0011SemicolonAfterProcedureDeclarationFormat" xml:space="preserve">
    <value>Procedure must not end with semicolon.</value>
  </data>
  <data name="Rule0011SemicolonAfterProcedureDeclarationTitle" xml:space="preserve">
    <value>Procedure must not end with semicolon.</value>
  </data>
  <data name="Rule0012InternalProceduresDescription" xml:space="preserve">
    <value>Procedure must be either local or internal.</value>
  </data>
  <data name="Rule0012InternalProceduresFormat" xml:space="preserve">
    <value>Procedure must be either local or internal.</value>
  </data>
  <data name="Rule0012InternalProceduresTitle" xml:space="preserve">
    <value>Procedure must be either local or internal.</value>
  </data>
  <data name="Rule0013ToolTipPunctuationDescription" xml:space="preserve">
    <value>ToolTip must end with a dot.</value>
  </data>
  <data name="Rule0013ToolTipPunctuationFormat" xml:space="preserve">
    <value>ToolTip must end with a dot.</value>
  </data>
  <data name="Rule0013ToolTipPunctuationTitle" xml:space="preserve">
    <value>ToolTip must end with a dot.</value>
  </data>
  <data name="Rule0014GlobalVarTriggerAndMethodPositionDescription" xml:space="preserve">
    <value>Position for global variables, triggers and methods.</value>
  </data>
  <data name="Rule0014GlobalVarTriggerAndMethodPositionFormat" xml:space="preserve">
    <value>The ordering should be like this: Global Variables -&gt; Triggers -&gt; Methods.</value>
  </data>
  <data name="Rule0014GlobalVarTriggerAndMethodPositionTitle" xml:space="preserve">
    <value>Position for global variables, triggers and methods.</value>
  </data>
  <data name="Rule0015LabelPunctuationDescription" xml:space="preserve">
    <value>Msg and Err labels should end with a dot, Qst should end with a question mark.</value>
  </data>
  <data name="Rule0015LabelPunctuationFormat" xml:space="preserve">
    <value>Msg and Err labels should end with a dot, Qst should end with a question mark.</value>
  </data>
  <data name="Rule0015LabelPunctuationTitle" xml:space="preserve">
    <value>Msg and Err labels should end with a dot, Qst should end with a question mark.</value>
  </data>
  <data name="Rule0016InternalMethodsMustHaveExplicitParametersDescription" xml:space="preserve">
    <value>Internal Methods must be invoked with explicit parameters.</value>
  </data>
  <data name="Rule0016InternalMethodsMustHaveExplicitParametersFormat" xml:space="preserve">
    <value>Internal Methods must be invoked with explicit parameters.</value>
  </data>
  <data name="Rule0016InternalMethodsMustHaveExplicitParametersTitle" xml:space="preserve">
    <value>Internal Methods must be invoked with explicit parameters.</value>
  </data>
  <data name="Rule0017EmptyObjectSectionsDescription" xml:space="preserve">
    <value>Object should not have empty sections.</value>
  </data>
  <data name="Rule0017EmptyObjectSectionsFormat" xml:space="preserve">
    <value>Object should not have empty sections.</value>
  </data>
  <data name="Rule0017EmptyObjectSectionsTitle" xml:space="preserve">
    <value>Object should not have empty sections.</value>
  </data>
  <data name="Rule0018ObjectAccessPropertyDescription" xml:space="preserve">
    <value>Objects need to have the Access properties defined.</value>
  </data>
  <data name="Rule0018ObjectAccessPropertyFormat" xml:space="preserve">
    <value>Objects need to have the Access properties defined.</value>
  </data>
  <data name="Rule0018ObjectAccessPropertyTitle" xml:space="preserve">
    <value>Objects need to have the Access properties defined.</value>
  </data>
  <data name="Rule0018ObjectExtensiblePropertyDescription" xml:space="preserve">
    <value>Objects need to have the Extensible properties defined.</value>
  </data>
  <data name="Rule0018ObjectExtensiblePropertyFormat" xml:space="preserve">
    <value>Objects need to have the Extensible properties defined.</value>
  </data>
  <data name="Rule0018ObjectExtensiblePropertyTitle" xml:space="preserve">
    <value>Objects need to have the Extensible properties defined.</value>
  </data>
  <data name="Rule0019LocalVariableNameShouldNotContainWhiteSpaceDescription" xml:space="preserve">
    <value>Local variable name should not contain whitespace</value>
  </data>
  <data name="Rule0019LocalVariableNameShouldNotContainWhiteSpaceFormat" xml:space="preserve">
    <value>Local variable with name '{0}' must not contain whitespaces.</value>
  </data>
  <data name="Rule0019LocalVariableNameShouldNotContainWhiteSpaceTitle" xml:space="preserve">
    <value>Local variable name should not contain whitespace</value>
  </data>
  <data name="Rule0019LocalVariableNameShouldNotContainWildcardSymbolsDescription" xml:space="preserve">
    <value>Local variable name should not contain wildcard symbols such as % or &amp;</value>
  </data>
  <data name="Rule0019LocalVariableNameShouldNotContainWildcardSymbolsFormat" xml:space="preserve">
    <value>Local variable with name '{0}' must not contain wildcard symbols.</value>
  </data>
  <data name="Rule0019LocalVariableNameShouldNotContainWildcardSymbolsTitle" xml:space="preserve">
    <value>Local variable name should not contain wildcard symbols such as % or &amp;</value>
  </data>
  <data name="Rule0020GlobalVariableNameShouldNotContainWhiteSpaceDescription" xml:space="preserve">
    <value>Global variable name should not contain whitespace</value>
  </data>
  <data name="Rule0020GlobalVariableNameShouldNotContainWhiteSpaceFormat" xml:space="preserve">
    <value>Global variable with name '{0}' must not contain whitespaces.</value>
  </data>
  <data name="Rule0020GlobalVariableNameShouldNotContainWhiteSpaceTitle" xml:space="preserve">
    <value>Global variable name should not contain whitespace</value>
  </data>
  <data name="Rule0020GlobalVariableNameShouldNotContainWildcardSymbolsDescription" xml:space="preserve">
    <value>Global variable name should not contain wildcard symbols such as % or &amp;</value>
  </data>
  <data name="Rule0020GlobalVariableNameShouldNotContainWildcardSymbolsFormat" xml:space="preserve">
    <value>Global variable with name '{0}' must not contain wildcard symbols.</value>
  </data>
  <data name="Rule0020GlobalVariableNameShouldNotContainWildcardSymbolsTitle" xml:space="preserve">
    <value>Global variable name should not contain wildcard symbols such as % or &amp;</value>
  </data>
  <data name="Rule0021ParameterNameShouldNotContainWhiteSpaceDescription" xml:space="preserve">
    <value>Parameter with name '{0}' must not contain whitespaces.</value>
  </data>
  <data name="Rule0021ParameterNameShouldNotContainWhiteSpaceFormat" xml:space="preserve">
    <value>Parameter with name '{0}' must not contain whitespaces.</value>
  </data>
  <data name="Rule0021ParameterNameShouldNotContainWhiteSpaceTitle" xml:space="preserve">
    <value>Parameter with name '{0}' must not contain whitespaces.</value>
  </data>
  <data name="Rule0021ParameterNameShouldNotContainWildcardSymbolsDescription" xml:space="preserve">
    <value>Parameter name should not contain wildcard symbols such as % or &amp;</value>
  </data>
  <data name="Rule0021ParameterNameShouldNotContainWildcardSymbolsFormat" xml:space="preserve">
    <value>Parameter with name '{0}' must not contain wildcard symbols.</value>
  </data>
  <data name="Rule0021ParameterNameShouldNotContainWildcardSymbolsTitle" xml:space="preserve">
    <value>Parameter name should not contain wildcard symbols such as % or &amp;</value>
  </data>
  <data name="Rule0022GridLayoutMustNotBeRowsDescription" xml:space="preserve">
    <value>GridLayout property must not have value Rows</value>
  </data>
  <data name="Rule0022GridLayoutMustNotBeRowsFormat" xml:space="preserve">
    <value>{0} property must not have value Rows.</value>
  </data>
  <data name="Rule0022GridLayoutMustNotBeRowsTitle" xml:space="preserve">
    <value>GridLayout property must not have value Rows</value>
  </data>
  <data name="Rule0023MandatoryAffixesDescription" xml:space="preserve">
    <value>The identifier must have at least one of the mandatory affixes.</value>
  </data>
  <data name="Rule0023MandatoryAffixesFormat" xml:space="preserve">
    <value>The identifier '{0}' must have at least one of the mandatory affixes '{1}'.</value>
  </data>
  <data name="Rule0023MandatoryAffixesTitle" xml:space="preserve">
    <value>The identifier must have at least one of the mandatory affixes.</value>
  </data>
  <data name="Rule0024EmptyCaptionLockedDescription" xml:space="preserve">
    <value>Empty captions should be locked.</value>
  </data>
  <data name="Rule0024EmptyCaptionLockedFormat" xml:space="preserve">
    <value>Empty captions should be locked.</value>
  </data>
  <data name="Rule0024EmptyCaptionLockedTitle" xml:space="preserve">
    <value>Empty captions should be locked.</value>
  </data>
  <data name="Rule0025CalcFieldsOnNormalFieldsDescription" xml:space="preserve">
    <value>SetAutoCalcFields must not be invoked on Normal fields.</value>
  </data>
  <data name="Rule0025CalcFieldsOnNormalFieldsFormat" xml:space="preserve">
    <value>SetAutoCalcFields must not be invoked on Normal fields.</value>
  </data>
  <data name="Rule0025CalcFieldsOnNormalFieldsTitle" xml:space="preserve">
    <value>SetAutoCalcFields must not be invoked on Normal fields.</value>
  </data>
  <data name="Rule0026ZeroEnumValueReservedForEmptyDescription" xml:space="preserve">
    <value>Zero (0) Enum value should be reserved for Empty Value.</value>
  </data>
  <data name="Rule0026ZeroEnumValueReservedForEmptyFormat" xml:space="preserve">
    <value>Zero (0) Enum value should be reserved for Empty Value.</value>
  </data>
  <data name="Rule0026ZeroEnumValueReservedForEmptyTitle" xml:space="preserve">
    <value>Zero (0) Enum value should be reserved for Empty Value.</value>
  </data>
  <data name="Rule0027AnalyzeTableExtensionText" xml:space="preserve">
    <value>Conflicting ID, Name or Type with Table '{0}'</value>
  </data>
  <data name="Rule0027AnalyzeTransferFieldText" xml:space="preserve">
    <value>Records '{0}' and '{1}' have conflicting fields with the same ID</value>
  </data>
  <data name="Rule0028_1IncorrectArgumentCountDescription" xml:space="preserve">
    <value>Analyze 'Get' function call arguments.</value>
  </data>
  <data name="Rule0028_1IncorrectArgumentCountFormat" xml:space="preserve">
    <value>The 'Get' function call on table '{0}' should have {1} argument(s).</value>
  </data>
  <data name="Rule0028_1IncorrectArgumentCountTitle" xml:space="preserve">
    <value>Incorrect number of arguments in 'Get' function call</value>
  </data>
  <data name="Rule0028_2InvalidArgumentTypeInGetCallDescription" xml:space="preserve">
    <value>Analyze 'Get' function call argument types.</value>
  </data>
  <data name="Rule0028_2InvalidArgumentTypeInGetCallFormat" xml:space="preserve">
    <value>The argument in 'Get' function call on table '{0}' has incorrect type.</value>
  </data>
  <data name="Rule0028_2InvalidArgumentTypeInGetCallTitle" xml:space="preserve">
    <value>Invalid argument type in 'Get' function call</value>
  </data>
  <data name="Rule0028_3ArgumentLengthExceedsMaxLengthDescription" xml:space="preserve">
    <value>Analyze 'Get' function call argument lengths.</value>
  </data>
  <data name="Rule0028_3ArgumentLengthExceedsMaxLengthFormat" xml:space="preserve">
    <value>The argument length in 'Get' function call on table '{0}' should not exceed the maximum length of '{1}'.</value>
  </data>
  <data name="Rule0028_3ArgumentLengthExceedsMaxLengthTitle" xml:space="preserve">
    <value>Argument length exceeds field maximum length in 'Get' function call</value>
  </data>
  <data name="Rule0029OptionDataTypeNotAllowedDescription" xml:space="preserve">
    <value>This rule throws a warning when an Option data type is used, as it is not allowed.</value>
  </data>
  <data name="Rule0029OptionDataTypeNotAllowedFormat" xml:space="preserve">
    <value>Option data type is not allowed in the code.</value>
  </data>
  <data name="Rule0029OptionDataTypeNotAllowedTitle" xml:space="preserve">
    <value>Option data type Not Allowed</value>
  </data>
  <data name="Rule0030UnusedMethodParametersDescription" xml:space="preserve">
    <value>Unused method parameters can clutter code and make it harder to understand.</value>
  </data>
  <data name="Rule0030UnusedMethodParametersFormat" xml:space="preserve">
    <value>The parameter '{0}' is unused in '{1}'</value>
  </data>
  <data name="Rule0030UnusedMethodParametersTitle" xml:space="preserve">
    <value>Unused Method Parameters</value>
  </data>
  <data name="Rule0031ObjectIsUnusedDescription" xml:space="preserve">
    <value>Unused objects can lead to unnecessary clutter in the codebase.</value>
  </data>
  <data name="Rule0031ObjectIsUnusedFormat" xml:space="preserve">
    <value>The {0} '{1}' is declared but not used.</value>
  </data>
  <data name="Rule0031ObjectIsUnusedTitle" xml:space="preserve">
    <value>Unused Object</value>
  </data>
  <data name="Rule0032DuplicatePropertyDescription" xml:space="preserve">
    <value>Duplicate properties with the same value can lead to redundancy and confusion.</value>
  </data>
  <data name="Rule0032DuplicatePropertyFormat" xml:space="preserve">
    <value>The property '{0}' has a duplicate with the same value.</value>
  </data>
  <data name="Rule0032DuplicatePropertyTitle" xml:space="preserve">
    <value>Duplicate Property</value>
  </data>
  <data name="Rule0033RedundantEditablePropertyDescription" xml:space="preserve">
    <value>Redundant editable properties can clutter code and lead to confusion.</value>
  </data>
  <data name="Rule0033RedundantEditablePropertyFormat" xml:space="preserve">
    <value>The 'Editable' Property is Redundant Due to the Presence of Object-Level Editable Property Being Defined as False.</value>
  </data>
  <data name="Rule0033RedundantEditablePropertyTitle" xml:space="preserve">
    <value>Redundant Editable Property</value>
  </data>
  <data name="Rule0034TableRelationTooLongDescription" xml:space="preserve">
    <value>The value being assigned is a bigger value than the value that is being assigned to. </value>
  </data>
  <data name="Rule0034TableRelationTooLongFormat" xml:space="preserve">
    <value>The length '{0}' of the table relation's target field '{1}' is greater than the length '{2}' of the source field '{3}'. This could result in a runtime error. Please make sure that the target field's length is less than equal to the source field length.</value>
  </data>
  <data name="Rule0034TableRelationTooLongTitle" xml:space="preserve">
    <value>Table Relation Value Too Long</value>
  </data>
  <data name="Rule0035UnusedGlobalProcedureDescription" xml:space="preserve">
    <value>Unused global procedures can contribute to unnecessary code clutter.</value>
  </data>
  <data name="Rule0035UnusedGlobalProcedureFormat" xml:space="preserve">
    <value>The global procedure '{0}' is defined but not used.</value>
  </data>
  <data name="Rule0035UnusedGlobalProcedureTitle" xml:space="preserve">
    <value>Unused Global Procedure</value>
  </data>
  <data name="Rule0036LocalEventPublisherDescription" xml:space="preserve">
    <value>Event Publishers should be local to allow for future parameter extensions.</value>
  </data>
  <data name="Rule0036LocalEventPublisherFormat" xml:space="preserve">
    <value>Event Publishers should be local to allow for future parameter extensions.</value>
  </data>
  <data name="Rule0036LocalEventPublisherTitle" xml:space="preserve">
    <value>Event Publishers should be local to allow for future parameter extensions.</value>
  </data>
  <data name="Rule0037GlobalVariablePrefixDescription" xml:space="preserve">
    <value>Using a consistent variable prefix makes it easier to identify them.</value>
  </data>
  <data name="Rule0037GlobalVariablePrefixFormat" xml:space="preserve">
    <value>Global variables must be prefixed by a 'g'.</value>
  </data>
  <data name="Rule0037GlobalVariablePrefixTitle" xml:space="preserve">
    <value>Global Variable Prefix</value>
  </data>
  <data name="Rule0038MissingParenthesisDescription" xml:space="preserve">
    <value>You must specify open and close parenthesis after '{0}'</value>
  </data>
  <data name="Rule0038MissingParenthesisFormat" xml:space="preserve">
    <value>You must specify open and close parenthesis after '{0}'</value>
  </data>
  <data name="Rule0038MissingParenthesisTitle" xml:space="preserve">
    <value>Function calls should have parenthesis even if they do not have any parameters.</value>
  </data>
  <data name="Rule0039TemporaryRecordsDescription" xml:space="preserve">
    <value>Temporary records should not trigger the table triggers.</value>
  </data>
  <data name="Rule0039TemporaryRecordsFormat" xml:space="preserve">
    <value>Temporary records should not trigger the table triggers.</value>
  </data>
  <data name="Rule0039TemporaryRecordsTitle" xml:space="preserve">
    <value>Temporary records should not trigger the table triggers.</value>
  </data>
</root>